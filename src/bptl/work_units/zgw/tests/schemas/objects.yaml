{"openapi": "3.0.0", "info": {"title": "Objects API", "description": "An API to manage Objects.\n\n# Introduction\n\nAn OBJECT is of a certain OBJECTTYPE (defined in the Objecttypes API). An \nOBJECT has a few core attributes that every OBJECT (technically a RECORD,\nsee below) has, although these attributes can sometimes be empty. They are\nattributes like `geometry` and some administrative attributes. The data that\ndescribes the actual object is stored in the `data` attribute and follows \nthe JSON schema as given by the OBJECTTYPE.\n\n## Validation\n\nWhen an OBJECT is created or changed the `OBJECT.type` attribute refers to the\nmatching OBJECTTYPE in the Objecttypes API. The RECORD always indicates which \nOBJECTTYPE-VERSION is used, shown in the `RECORD.typeVersion` attribute.\n\nUsing these 2 attributes, the appropriate JSON schema is retrieved from the \nObjecttypes API and the OBJECT data is validated against this JSON schema.\n\n## History\n\nEach OBJECT has 1 or more RECORDs. A RECORD contains the data of an OBJECT\nat a certain time. An OBJECT can have multiple RECORDS that describe the\nhistory of that OBJECT. Changes to an OBJECT actually create a new RECORD\nunder the OBJECT and leaves the old RECORD as is.\n\n### Material and formal history\n\nHistory can be seen from 2 perspectives: formal and material history. The \nformal history describes the history as it should be (stored in the \n`startAt` and `endAt` attributes). The material history describes the \nhistory as it was administratively processed (stored in the `registeredAt`\nattribute).\n\nThe difference is that an object could be created or updated in the real \nworld at a certain point in time but the administrative change (ie. save or\nupdate the object in the Objects API) can be done at a later time. The\nquery parameters `?date=2021-01-01` (formal history) and \n`?registrationDate=2021-01-01` (material history) allow for querying the \nRECORDS as seen from both perspectives, and can yield different results.\n\n### Corrections\n\nRECORDs cannot be deleted or changed once saved. If an error was made to\na RECORD, the RECORD can be \"corrected\" by saving a new RECORD and indicate\nthat it corrects a previous RECORD. This is done via the attribute \n`correctionFor`.\n\n### Deletion\n\nAlthough OBJECTs can be deleted, it is sometimes better to set the \n`endDate` of an OBJECT. Deleting an OBJECT also deletes all RECORDs in \naccordance with privacy laws.\n\n# Authorizations\n\nThe API uses API-tokens that grant certain permissions. The API-token is\npassed via a header, like this: `Authorization: Token <token>`\n", "version": "1.1.0"}, "security": [{"Token": []}], "paths": {"/objects": {"get": {"operationId": "object_list", "description": "Retrieve a list of OBJECTs and their actual RECORD. The actual record is defined as if the query parameter `date=<today>` was given.", "parameters": [{"name": "type", "in": "query", "description": "Url reference to OBJECTTYPE in Objecttypes API", "required": false, "schema": {"type": "string", "format": "uri", "minLength": 1, "maxLength": 1000}}, {"name": "dataAttrs", "in": "query", "description": "Only include objects that have attributes with certain values.\nData filtering expressions are comma-separated and are structured as follows:\nA valid parameter value has the form `key__operator__value`.\n`key` is the attribute name, `operator` is the comparison operator to be used and `value` is the attribute value.\nNote: Values can be string or numeric. Dates are not supported.\n\nValid operator values are:\n* `exact` - equal to\n* `gt` - greater than\n* `gte` - greater than or equal to\n* `lt` - lower than\n* `lte` - lower than or equal to\n`value` may not contain double underscore or comma characters.\n`key` may not contain comma characters and includes double underscore only if it indicates nested attributes.\n\nExample: in order to display only objects with `height` equal to 100, query `data_attrs=height__exact__100`\nshould be used. If `height` is nested inside `dimensions` attribute, query should look like\n`data_attrs=dimensions__height__exact__100`\n", "required": false, "schema": {"type": "string"}}, {"name": "date", "in": "query", "description": "Display record data for the specified formal date, i.e. the specified date would be between `startAt` and `endAt` attributes. The default value is today", "required": false, "schema": {"type": "string"}}, {"name": "registrationDate", "in": "query", "description": "Display record data for the specified registration date, i.e. the specified date would be between `registrationAt` attributes of different records", "required": false, "schema": {"type": "string"}}, {"name": "Accept-Crs", "in": "header", "description": "The desired 'Coordinate Reference System' (CRS) of the response data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": false, "schema": {"type": "string", "enum": ["EPSG:4326"]}}, {"name": "fields", "in": "query", "description": "Comma-separated fields, which should be displayed in the response. For example: 'url, uuid, record__geometry'. Attributes inside `record.data` field are not supported for this parameter. ", "required": false, "schema": {"type": "string"}}], "responses": {"200": {"description": "OK", "headers": {"Content-Crs": {"description": "Het 'Coordinate Reference System' (CRS) van de antwoorddata. Volgens de GeoJSON spec is WGS84 de default (EPSG:4326 is hetzelfde als WGS84).", "schema": {"type": "string", "enum": ["EPSG:4326"]}}, "API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Object"}}}}}, "400": {"$ref": "#/components/responses/400"}, "401": {"$ref": "#/components/responses/401"}, "403": {"$ref": "#/components/responses/403"}, "406": {"$ref": "#/components/responses/406"}, "409": {"$ref": "#/components/responses/409"}, "410": {"$ref": "#/components/responses/410"}, "412": {"$ref": "#/components/responses/412"}, "415": {"$ref": "#/components/responses/415"}, "429": {"$ref": "#/components/responses/429"}, "500": {"$ref": "#/components/responses/500"}}, "tags": ["objects"]}, "post": {"operationId": "object_create", "description": "Create an OBJECT and its initial RECORD.", "parameters": [{"name": "Content-Type", "in": "header", "description": "Content type of the request body.", "required": true, "schema": {"type": "string", "enum": ["application/json"]}}, {"name": "Accept-Crs", "in": "header", "description": "The desired 'Coordinate Reference System' (CRS) of the response data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": false, "schema": {"type": "string", "enum": ["EPSG:4326"]}}, {"name": "Content-Crs", "in": "header", "description": "The 'Coordinate Reference System' (CRS) of the request data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": true, "schema": {"type": "string", "enum": ["EPSG:4326"]}}], "requestBody": {"$ref": "#/components/requestBodies/Object"}, "responses": {"201": {"description": "Created", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}, "Location": {"schema": {"type": "string", "format": "uri"}, "description": "URL waar de resource leeft."}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Object"}}}}, "400": {"$ref": "#/components/responses/400"}, "401": {"$ref": "#/components/responses/401"}, "403": {"$ref": "#/components/responses/403"}, "406": {"$ref": "#/components/responses/406"}, "409": {"$ref": "#/components/responses/409"}, "410": {"$ref": "#/components/responses/410"}, "412": {"$ref": "#/components/responses/412"}, "415": {"$ref": "#/components/responses/415"}, "429": {"$ref": "#/components/responses/429"}, "500": {"$ref": "#/components/responses/500"}}, "tags": ["objects"]}, "parameters": []}, "/objects/search": {"post": {"operationId": "object_search", "description": "Perform a (geo) search on OBJECTs", "parameters": [{"name": "Content-Type", "in": "header", "description": "Content type of the request body.", "required": true, "schema": {"type": "string", "enum": ["application/json"]}}, {"name": "Accept-Crs", "in": "header", "description": "The desired 'Coordinate Reference System' (CRS) of the response data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": false, "schema": {"type": "string", "enum": ["EPSG:4326"]}}, {"name": "Content-Crs", "in": "header", "description": "The 'Coordinate Reference System' (CRS) of the request data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": true, "schema": {"type": "string", "enum": ["EPSG:4326"]}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ObjectSearch"}}}, "required": true}, "responses": {"200": {"description": "OK", "headers": {"Content-Crs": {"description": "Het 'Coordinate Reference System' (CRS) van de antwoorddata. Volgens de GeoJSON spec is WGS84 de default (EPSG:4326 is hetzelfde als WGS84).", "schema": {"type": "string", "enum": ["EPSG:4326"]}}, "API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Object"}}}}}, "400": {"$ref": "#/components/responses/400"}, "401": {"$ref": "#/components/responses/401"}, "403": {"$ref": "#/components/responses/403"}, "406": {"$ref": "#/components/responses/406"}, "409": {"$ref": "#/components/responses/409"}, "410": {"$ref": "#/components/responses/410"}, "412": {"$ref": "#/components/responses/412"}, "415": {"$ref": "#/components/responses/415"}, "429": {"$ref": "#/components/responses/429"}, "500": {"$ref": "#/components/responses/500"}}, "tags": ["objects"]}, "parameters": []}, "/objects/{uuid}": {"get": {"operationId": "object_read", "description": "Retrieve a single OBJECT and its actual RECORD. The actual record is defined as if the query parameter `date=<today>` was given.", "parameters": [{"name": "Accept-Crs", "in": "header", "description": "The desired 'Coordinate Reference System' (CRS) of the response data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": false, "schema": {"type": "string", "enum": ["EPSG:4326"]}}, {"name": "If-None-Match", "in": "header", "description": "Perform conditional requests. This header should contain one or multiple ETag values of resources the client has cached. If the current resource ETag value is in this set, then an HTTP 304 empty body will be returned. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) for details.", "required": false, "examples": {"oneValue": {"summary": "One ETag value", "value": "\"79054025255fb1a26e4bc422aef54eb4\""}, "multipleValues": {"summary": "Multiple ETag values", "value": "\"79054025255fb1a26e4bc422aef54eb4\", \"e4d909c290d0fb1ca068ffaddf22cbd0\""}}, "schema": {"type": "string"}}, {"name": "fields", "in": "query", "description": "Comma-separated fields, which should be displayed in the response. For example: 'url, uuid, record__geometry'. Attributes inside `record.data` field are not supported for this parameter. ", "required": false, "schema": {"type": "string"}}], "responses": {"200": {"description": "OK", "headers": {"Content-Crs": {"description": "Het 'Coordinate Reference System' (CRS) van de antwoorddata. Volgens de GeoJSON spec is WGS84 de default (EPSG:4326 is hetzelfde als WGS84).", "schema": {"type": "string", "enum": ["EPSG:4326"]}}, "ETag": {"description": "De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren.", "schema": {"type": "string"}}, "API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Object"}}}}, "401": {"$ref": "#/components/responses/401"}, "403": {"$ref": "#/components/responses/403"}, "404": {"$ref": "#/components/responses/404"}, "406": {"$ref": "#/components/responses/406"}, "409": {"$ref": "#/components/responses/409"}, "410": {"$ref": "#/components/responses/410"}, "412": {"$ref": "#/components/responses/412"}, "415": {"$ref": "#/components/responses/415"}, "429": {"$ref": "#/components/responses/429"}, "500": {"$ref": "#/components/responses/500"}}, "tags": ["objects"]}, "put": {"operationId": "object_update", "description": "Update the OBJECT by creating a new RECORD with the updates values.", "parameters": [{"name": "Content-Type", "in": "header", "description": "Content type of the request body.", "required": true, "schema": {"type": "string", "enum": ["application/json"]}}, {"name": "Accept-Crs", "in": "header", "description": "The desired 'Coordinate Reference System' (CRS) of the response data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": false, "schema": {"type": "string", "enum": ["EPSG:4326"]}}, {"name": "Content-Crs", "in": "header", "description": "The 'Coordinate Reference System' (CRS) of the request data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": true, "schema": {"type": "string", "enum": ["EPSG:4326"]}}], "requestBody": {"$ref": "#/components/requestBodies/Object"}, "responses": {"200": {"description": "OK", "headers": {"Content-Crs": {"description": "Het 'Coordinate Reference System' (CRS) van de antwoorddata. Volgens de GeoJSON spec is WGS84 de default (EPSG:4326 is hetzelfde als WGS84).", "schema": {"type": "string", "enum": ["EPSG:4326"]}}, "API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Object"}}}}, "400": {"$ref": "#/components/responses/400"}, "401": {"$ref": "#/components/responses/401"}, "403": {"$ref": "#/components/responses/403"}, "404": {"$ref": "#/components/responses/404"}, "406": {"$ref": "#/components/responses/406"}, "409": {"$ref": "#/components/responses/409"}, "410": {"$ref": "#/components/responses/410"}, "412": {"$ref": "#/components/responses/412"}, "415": {"$ref": "#/components/responses/415"}, "429": {"$ref": "#/components/responses/429"}, "500": {"$ref": "#/components/responses/500"}}, "tags": ["objects"]}, "patch": {"operationId": "object_partial_update", "description": "Update the OBJECT by creating a new RECORD with the updates values.", "parameters": [{"name": "Content-Type", "in": "header", "description": "Content type of the request body.", "required": true, "schema": {"type": "string", "enum": ["application/json"]}}, {"name": "Accept-Crs", "in": "header", "description": "The desired 'Coordinate Reference System' (CRS) of the response data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": false, "schema": {"type": "string", "enum": ["EPSG:4326"]}}, {"name": "Content-Crs", "in": "header", "description": "The 'Coordinate Reference System' (CRS) of the request data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": true, "schema": {"type": "string", "enum": ["EPSG:4326"]}}], "requestBody": {"$ref": "#/components/requestBodies/Object"}, "responses": {"200": {"description": "OK", "headers": {"Content-Crs": {"description": "Het 'Coordinate Reference System' (CRS) van de antwoorddata. Volgens de GeoJSON spec is WGS84 de default (EPSG:4326 is hetzelfde als WGS84).", "schema": {"type": "string", "enum": ["EPSG:4326"]}}, "API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Object"}}}}, "400": {"$ref": "#/components/responses/400"}, "401": {"$ref": "#/components/responses/401"}, "403": {"$ref": "#/components/responses/403"}, "404": {"$ref": "#/components/responses/404"}, "406": {"$ref": "#/components/responses/406"}, "409": {"$ref": "#/components/responses/409"}, "410": {"$ref": "#/components/responses/410"}, "412": {"$ref": "#/components/responses/412"}, "415": {"$ref": "#/components/responses/415"}, "429": {"$ref": "#/components/responses/429"}, "500": {"$ref": "#/components/responses/500"}}, "tags": ["objects"]}, "delete": {"operationId": "object_delete", "description": "Delete an OBJECT and all RECORDs belonging to it.", "responses": {"204": {"description": "No content", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}}, "401": {"$ref": "#/components/responses/401"}, "403": {"$ref": "#/components/responses/403"}, "404": {"$ref": "#/components/responses/404"}, "406": {"$ref": "#/components/responses/406"}, "409": {"$ref": "#/components/responses/409"}, "410": {"$ref": "#/components/responses/410"}, "412": {"$ref": "#/components/responses/412"}, "415": {"$ref": "#/components/responses/415"}, "429": {"$ref": "#/components/responses/429"}, "500": {"$ref": "#/components/responses/500"}}, "tags": ["objects"]}, "parameters": [{"name": "uuid", "in": "path", "description": "Unique identifier (UUID4)", "required": true, "schema": {"type": "string", "format": "uuid"}}]}, "/objects/{uuid}/history": {"get": {"operationId": "object_history", "description": "Retrieve all RECORDs of an OBJECT.", "parameters": [{"name": "Accept-Crs", "in": "header", "description": "The desired 'Coordinate Reference System' (CRS) of the response data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same as WGS84).", "required": false, "schema": {"type": "string", "enum": ["EPSG:4326"]}}, {"name": "If-None-Match", "in": "header", "description": "Perform conditional requests. This header should contain one or multiple ETag values of resources the client has cached. If the current resource ETag value is in this set, then an HTTP 304 empty body will be returned. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) for details.", "required": false, "examples": {"oneValue": {"summary": "One ETag value", "value": "\"79054025255fb1a26e4bc422aef54eb4\""}, "multipleValues": {"summary": "Multiple ETag values", "value": "\"79054025255fb1a26e4bc422aef54eb4\", \"e4d909c290d0fb1ca068ffaddf22cbd0\""}}, "schema": {"type": "string"}}], "responses": {"200": {"description": "", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/HistoryRecord"}}}}}}, "tags": ["objects"]}, "parameters": [{"name": "uuid", "in": "path", "description": "Unique identifier (UUID4)", "required": true, "schema": {"type": "string", "format": "uuid"}}]}}, "tags": [{"name": "objects", "description": ""}, {"name": "search", "description": ""}], "servers": [{"url": "https://example.com/api/v1"}], "components": {"responses": {"400": {"description": "Bad request", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/ValidatieFout"}}}}, "401": {"description": "Unauthorized", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "403": {"description": "Forbidden", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "404": {"description": "Not found", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "406": {"description": "Not acceptable", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "409": {"description": "Conflict", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "410": {"description": "Gone", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "412": {"description": "Precondition failed", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "415": {"description": "Unsupported media type", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "429": {"description": "Too many requests", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}, "500": {"description": "Internal server error", "headers": {"API-version": {"schema": {"type": "string"}, "description": "Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1."}}, "content": {"application/problem+json": {"schema": {"$ref": "#/components/schemas/Fout"}}}}}, "requestBodies": {"Object": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Object"}}}, "required": true}}, "securitySchemes": {"Token": {"type": "apiKey", "name": "Authorization", "in": "header"}}, "schemas": {"Geometry": {"title": "Geometry", "description": "GeoJSON geometry", "required": ["type"], "type": "object", "properties": {"type": {"description": "The geometry type", "type": "string", "enum": ["Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", "Feature", "FeatureCollection", "GeometryCollection"]}}, "externalDocs": {"url": "https://tools.ietf.org/html/rfc7946#section-3.1"}}, "Point2D": {"title": "Point2D", "description": "A 2D point", "type": "array", "items": {"type": "number"}, "maxItems": 2, "minItems": 2}, "Point": {"description": "GeoJSON point geometry", "type": "object", "allOf": [{"$ref": "#/components/schemas/Geometry"}, {"required": ["coordinates"], "type": "object", "properties": {"coordinates": {"$ref": "#/components/schemas/Point2D"}}}], "externalDocs": {"url": "https://tools.ietf.org/html/rfc7946#section-3.1.2"}}, "MultiPoint": {"description": "GeoJSON multi-point geometry", "type": "object", "allOf": [{"$ref": "#/components/schemas/Geometry"}, {"required": ["coordinates"], "type": "object", "properties": {"coordinates": {"type": "array", "items": {"$ref": "#/components/schemas/Point2D"}}}}], "externalDocs": {"url": "https://tools.ietf.org/html/rfc7946#section-3.1.3"}}, "LineString": {"description": "GeoJSON line-string geometry", "type": "object", "allOf": [{"$ref": "#/components/schemas/Geometry"}, {"required": ["coordinates"], "type": "object", "properties": {"coordinates": {"type": "array", "items": {"$ref": "#/components/schemas/Point2D"}, "minItems": 2}}}], "externalDocs": {"url": "https://tools.ietf.org/html/rfc7946#section-3.1.4"}}, "MultiLineString": {"description": "GeoJSON multi-line-string geometry", "type": "object", "allOf": [{"$ref": "#/components/schemas/Geometry"}, {"required": ["coordinates"], "type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "array", "items": {"$ref": "#/components/schemas/Point2D"}}}}}], "externalDocs": {"url": "https://tools.ietf.org/html/rfc7946#section-3.1.5"}}, "Polygon": {"description": "GeoJSON polygon geometry", "type": "object", "allOf": [{"$ref": "#/components/schemas/Geometry"}, {"required": ["coordinates"], "type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "array", "items": {"$ref": "#/components/schemas/Point2D"}}}}}], "externalDocs": {"url": "https://tools.ietf.org/html/rfc7946#section-3.1.6"}}, "MultiPolygon": {"description": "GeoJSON multi-polygon geometry", "type": "object", "allOf": [{"$ref": "#/components/schemas/Geometry"}, {"required": ["coordinates"], "type": "object", "properties": {"coordinates": {"type": "array", "items": {"type": "array", "items": {"type": "array", "items": {"$ref": "#/components/schemas/Point2D"}}}}}}], "externalDocs": {"url": "https://tools.ietf.org/html/rfc7946#section-3.1.7"}}, "GeometryCollection": {"description": "GeoJSON multi-polygon geometry", "type": "object", "allOf": [{"$ref": "#/components/schemas/Geometry"}, {"required": ["geometries"], "type": "object", "properties": {"geometries": {"type": "array", "items": {"$ref": "#/components/schemas/Geometry"}}}}], "externalDocs": {"url": "https://tools.ietf.org/html/rfc7946#section-3.1.8"}}, "GeoJSONGeometry": {"title": "GeoJSONGeometry", "type": "object", "discriminator": {"propertyName": "type"}, "oneOf": [{"$ref": "#/components/schemas/Point"}, {"$ref": "#/components/schemas/MultiPoint"}, {"$ref": "#/components/schemas/LineString"}, {"$ref": "#/components/schemas/MultiLineString"}, {"$ref": "#/components/schemas/Polygon"}, {"$ref": "#/components/schemas/MultiPolygon"}, {"$ref": "#/components/schemas/GeometryCollection"}]}, "ObjectRecord": {"description": "State of the OBJECT at a certain time", "required": ["typeVersion", "startAt"], "type": "object", "properties": {"index": {"title": "Index", "description": "Incremental index number of the object record.", "type": "integer", "readOnly": true}, "typeVersion": {"title": "Typeversion", "description": "Version of the OBJECTTYPE for data in the object record", "type": "integer", "maximum": 32767, "minimum": 0}, "data": {"title": "Data", "description": "Object data, based on OBJECTTYPE", "type": "object"}, "geometry": {"$ref": "#/components/schemas/GeoJSONGeometry"}, "startAt": {"title": "Startat", "description": "Legal start date of the object record", "type": "string", "format": "date"}, "endAt": {"title": "Endat", "description": "Legal end date of the object record", "type": "string", "format": "date", "readOnly": true}, "registrationAt": {"title": "Registrationat", "description": "The date when the record was registered in the system", "type": "string", "format": "date", "readOnly": true}, "correctionFor": {"title": "Correctionfor", "description": "Index of the record corrected by the current record", "type": "integer"}, "correctedBy": {"title": "Correctedby", "description": "Index of the record, which corrects the current record", "type": "string", "readOnly": true}}}, "Object": {"required": ["type", "record"], "type": "object", "properties": {"url": {"title": "Url", "description": "URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object.", "type": "string", "format": "uri", "readOnly": true, "maxLength": 1000, "minLength": 1}, "uuid": {"title": "Uuid", "description": "Unique identifier (UUID4)", "type": "string", "format": "uuid"}, "type": {"title": "Type", "description": "Url reference to OBJECTTYPE in Objecttypes API", "type": "string", "format": "uri", "maxLength": 1000, "minLength": 1}, "record": {"$ref": "#/components/schemas/ObjectRecord"}}}, "Fout": {"required": ["code", "title", "status", "detail", "instance"], "type": "object", "properties": {"type": {"title": "Type", "description": "URI referentie naar het type fout, bedoeld voor developers", "type": "string"}, "code": {"title": "Code", "description": "Systeemcode die het type fout aangeeft", "type": "string", "minLength": 1}, "title": {"title": "Title", "description": "Generieke titel voor het type fout", "type": "string", "minLength": 1}, "status": {"title": "Status", "description": "De HTTP status code", "type": "integer"}, "detail": {"title": "Detail", "description": "Extra informatie bij de fout, indien beschikbaar", "type": "string", "minLength": 1}, "instance": {"title": "Instance", "description": "URI met referentie naar dit specifiek voorkomen van de fout. Deze kan gebruikt worden in combinatie met server logs, bijvoorbeeld.", "type": "string", "minLength": 1}}}, "FieldValidationError": {"required": ["name", "code", "reason"], "type": "object", "properties": {"name": {"title": "Name", "description": "Naam van het veld met ongeldige gegevens", "type": "string", "minLength": 1}, "code": {"title": "Code", "description": "Systeemcode die het type fout aangeeft", "type": "string", "minLength": 1}, "reason": {"title": "Reason", "description": "Uitleg wat er precies fout is met de gegevens", "type": "string", "minLength": 1}}}, "ValidatieFout": {"required": ["code", "title", "status", "detail", "instance", "invalid_params"], "type": "object", "properties": {"type": {"title": "Type", "description": "URI referentie naar het type fout, bedoeld voor developers", "type": "string"}, "code": {"title": "Code", "description": "Systeemcode die het type fout aangeeft", "type": "string", "minLength": 1}, "title": {"title": "Title", "description": "Generieke titel voor het type fout", "type": "string", "minLength": 1}, "status": {"title": "Status", "description": "De HTTP status code", "type": "integer"}, "detail": {"title": "Detail", "description": "Extra informatie bij de fout, indien beschikbaar", "type": "string", "minLength": 1}, "instance": {"title": "Instance", "description": "URI met referentie naar dit specifiek voorkomen van de fout. Deze kan gebruikt worden in combinatie met server logs, bijvoorbeeld.", "type": "string", "minLength": 1}, "invalid_params": {"type": "array", "items": {"$ref": "#/components/schemas/FieldValidationError"}}}}, "GeoWithin": {"type": "object", "properties": {"within": {"$ref": "#/components/schemas/GeoJSONGeometry"}}}, "ObjectSearch": {"required": ["geometry"], "type": "object", "properties": {"geometry": {"$ref": "#/components/schemas/GeoWithin"}, "type": {"title": "Type", "description": "Url reference to OBJECTTYPE in Objecttypes API", "type": "string", "minLength": 1}, "dataAttrs": {"title": "Dataattrs", "description": "Only include objects that have attributes with certain values.\nData filtering expressions are comma-separated and are structured as follows:\nA valid parameter value has the form `key__operator__value`.\n`key` is the attribute name, `operator` is the comparison operator to be used and `value` is the attribute value.\nNote: Values can be string or numeric. Dates are not supported.\n\nValid operator values are:\n* `exact` - equal to\n* `gt` - greater than\n* `gte` - greater than or equal to\n* `lt` - lower than\n* `lte` - lower than or equal to\n`value` may not contain double underscore or comma characters.\n`key` may not contain comma characters and includes double underscore only if it indicates nested attributes.\n\nExample: in order to display only objects with `height` equal to 100, query `data_attrs=height__exact__100`\nshould be used. If `height` is nested inside `dimensions` attribute, query should look like\n`data_attrs=dimensions__height__exact__100`\n", "type": "string", "minLength": 1}, "date": {"title": "Date", "description": "Display record data for the specified formal date, i.e. the specified date would be between `startAt` and `endAt` attributes. The default value is today", "type": "string", "minLength": 1}, "registrationDate": {"title": "Registrationdate", "description": "Display record data for the specified registration date, i.e. the specified date would be between `registrationAt` attributes of different records", "type": "string", "minLength": 1}}}, "HistoryRecord": {"required": ["typeVersion", "startAt"], "type": "object", "properties": {"index": {"title": "Index", "description": "Incremental index number of the object record.", "type": "integer", "readOnly": true}, "typeVersion": {"title": "Typeversion", "description": "Version of the OBJECTTYPE for data in the object record", "type": "integer", "maximum": 32767, "minimum": 0}, "data": {"title": "Data", "description": "Object data, based on OBJECTTYPE", "type": "object"}, "geometry": {"$ref": "#/components/schemas/GeoJSONGeometry"}, "startAt": {"title": "Startat", "description": "Legal start date of the object record", "type": "string", "format": "date"}, "endAt": {"title": "Endat", "description": "Legal end date of the object record", "type": "string", "format": "date", "readOnly": true}, "registrationAt": {"title": "Registrationat", "description": "The date when the record was registered in the system", "type": "string", "format": "date", "readOnly": true}, "correctionFor": {"title": "Correctionfor", "description": "Index of the record corrected by the current record", "type": "integer", "readOnly": true}, "correctedBy": {"title": "Correctedby", "description": "Index of the record, which corrects the current record", "type": "string", "readOnly": true}}}}}}